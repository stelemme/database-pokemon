const fs = require('fs');
const csv = `2023-06-23 00:14:06.6440, 2023-06-23, 00:14:06, 1, 1
2023-06-23 00:14:27.2010, 2023-06-23, 00:14:27, 2, 1
2023-06-23 00:14:53.0010, 2023-06-23, 00:14:53, 3, 1
2023-06-23 00:15:13.4560, 2023-06-23, 00:15:13, 4, 1
2023-06-23 00:15:34.9920, 2023-06-23, 00:15:34, 5, 1
2023-06-23 00:16:13.4780, 2023-06-23, 00:16:13, 6, 1
2023-06-23 00:16:43.7730, 2023-06-23, 00:16:43, 7, 1
2023-06-23 00:17:09.4030, 2023-06-23, 00:17:09, 8, 1
2023-06-23 00:17:32.3060, 2023-06-23, 00:17:32, 9, 1
2023-06-23 00:17:54.1400, 2023-06-23, 00:17:54, 10, 1
2023-06-23 00:18:17.8290, 2023-06-23, 00:18:17, 11, 1
2023-06-23 00:18:42.0780, 2023-06-23, 00:18:42, 12, 1
2023-06-23 00:19:14.9700, 2023-06-23, 00:19:14, 13, 1
2023-06-23 00:19:36.9530, 2023-06-23, 00:19:36, 14, 1
2023-06-23 00:19:58.3850, 2023-06-23, 00:19:58, 15, 1
2023-06-23 00:20:20.0060, 2023-06-23, 00:20:20, 16, 1
2023-06-23 00:20:41.2620, 2023-06-23, 00:20:41, 17, 1
2023-06-23 00:21:04.0600, 2023-06-23, 00:21:04, 18, 1
2023-06-23 00:21:25.7000, 2023-06-23, 00:21:25, 19, 1
2023-06-23 00:21:49.3690, 2023-06-23, 00:21:49, 20, 1
2023-06-23 00:22:11.0710, 2023-06-23, 00:22:11, 21, 1
2023-06-23 00:22:32.8610, 2023-06-23, 00:22:32, 22, 1
2023-06-23 00:22:53.4800, 2023-06-23, 00:22:53, 23, 1
2023-06-23 00:23:15.8450, 2023-06-23, 00:23:15, 24, 1
2023-06-23 00:23:41.1320, 2023-06-23, 00:23:41, 25, 1
2023-06-23 00:24:01.0690, 2023-06-23, 00:24:01, 26, 1
2023-06-23 00:24:21.6900, 2023-06-23, 00:24:21, 27, 1
2023-06-23 00:24:42.0210, 2023-06-23, 00:24:42, 28, 1
2023-06-23 00:25:04.2450, 2023-06-23, 00:25:04, 29, 1
2023-06-23 00:25:25.9640, 2023-06-23, 00:25:25, 30, 1
2023-06-23 00:25:59.4150, 2023-06-23, 00:25:59, 31, 1
2023-06-23 00:26:25.2370, 2023-06-23, 00:26:25, 32, 1
2023-06-23 00:26:48.8400, 2023-06-23, 00:26:48, 33, 1
2023-06-23 00:27:10.7710, 2023-06-23, 00:27:10, 34, 1
2023-06-23 00:27:34.8300, 2023-06-23, 00:27:34, 35, 1
2023-06-23 00:27:56.9590, 2023-06-23, 00:27:56, 36, 1
2023-06-23 00:28:21.1150, 2023-06-23, 00:28:21, 37, 1
2023-06-23 00:28:45.9860, 2023-06-23, 00:28:45, 38, 1
2023-06-23 00:29:11.6340, 2023-06-23, 00:29:11, 39, 1
2023-06-23 00:29:34.4280, 2023-06-23, 00:29:34, 40, 1
2023-06-23 00:30:01.2150, 2023-06-23, 00:30:01, 41, 1
2023-06-23 00:30:28.7790, 2023-06-23, 00:30:28, 42, 1
2023-06-23 00:30:58.6690, 2023-06-23, 00:30:58, 43, 1
2023-06-23 00:31:24.9900, 2023-06-23, 00:31:24, 44, 1
2023-06-23 00:31:46.7760, 2023-06-23, 00:31:46, 45, 1
2023-06-23 00:32:10.3950, 2023-06-23, 00:32:10, 46, 1
2023-06-23 00:32:38.6110, 2023-06-23, 00:32:38, 47, 1
2023-06-23 00:33:01.2290, 2023-06-23, 00:33:01, 48, 1
2023-06-23 00:33:21.7920, 2023-06-23, 00:33:21, 49, 1
2023-06-23 00:33:40.4210, 2023-06-23, 00:33:40, 50, 1
2023-06-23 00:34:07.3560, 2023-06-23, 00:34:07, 51, 1
2023-06-23 00:34:30.6770, 2023-06-23, 00:34:30, 52, 1
2023-06-23 00:34:50.8950, 2023-06-23, 00:34:50, 53, 1
2023-06-23 00:35:14.6950, 2023-06-23, 00:35:14, 54, 1
2023-06-23 00:35:38.2620, 2023-06-23, 00:35:38, 55, 1
2023-06-23 00:36:00.3190, 2023-06-23, 00:36:00, 56, 1
2023-06-23 00:36:29.6060, 2023-06-23, 00:36:29, 57, 1
2023-06-23 00:36:53.6230, 2023-06-23, 00:36:53, 58, 1
2023-06-23 00:37:18.1910, 2023-06-23, 00:37:18, 59, 1
2023-06-23 00:37:43.5320, 2023-06-23, 00:37:43, 60, 1
2023-06-23 00:38:19.0310, 2023-06-23, 00:38:19, 61, 1
2023-06-23 00:38:37.1200, 2023-06-23, 00:38:37, 62, 1
2023-06-23 00:39:10.3560, 2023-06-23, 00:39:10, 63, 1
2023-06-23 00:39:37.8260, 2023-06-23, 00:39:37, 64, 1
2023-06-23 00:39:59.9200, 2023-06-23, 00:39:59, 65, 1
2023-06-23 00:40:22.8360, 2023-06-23, 00:40:22, 66, 1
2023-06-23 00:40:49.6720, 2023-06-23, 00:40:49, 67, 1
2023-06-23 00:41:15.3570, 2023-06-23, 00:41:15, 68, 1
2023-06-23 00:41:41.8130, 2023-06-23, 00:41:41, 69, 1
2023-06-23 00:42:16.6810, 2023-06-23, 00:42:16, 70, 1
2023-06-23 00:42:53.8500, 2023-06-23, 00:42:53, 71, 1
2023-06-23 00:43:16.8570, 2023-06-23, 00:43:16, 72, 1
2023-06-23 00:43:43.9530, 2023-06-23, 00:43:43, 73, 1
2023-06-23 00:44:07.5580, 2023-06-23, 00:44:07, 74, 1
2023-06-23 00:44:35.6990, 2023-06-23, 00:44:35, 75, 1
2023-06-23 00:45:04.6820, 2023-06-23, 00:45:04, 76, 1
2023-06-23 00:45:33.9190, 2023-06-23, 00:45:33, 77, 1
2023-06-23 00:46:03.0720, 2023-06-23, 00:46:03, 78, 1
2023-06-23 00:46:37.6940, 2023-06-23, 00:46:37, 79, 1
2023-06-23 00:47:03.6170, 2023-06-23, 00:47:03, 80, 1
2023-06-23 00:47:26.6340, 2023-06-23, 00:47:26, 81, 1
2023-06-23 00:47:50.5690, 2023-06-23, 00:47:50, 82, 1
2023-06-23 00:48:20.7410, 2023-06-23, 00:48:20, 83, 1
2023-06-23 00:48:46.6430, 2023-06-23, 00:48:46, 84, 1
2023-06-23 00:49:28.8130, 2023-06-23, 00:49:28, 85, 1
2023-06-23 00:49:50.4150, 2023-06-23, 00:49:50, 86, 1
2023-06-23 00:50:18.9020, 2023-06-23, 00:50:18, 87, 1
2023-06-23 00:50:54.7100, 2023-06-23, 00:50:54, 88, 1
2023-06-23 00:51:23.6230, 2023-06-23, 00:51:23, 89, 1
2023-06-23 00:51:48.6310, 2023-06-23, 00:51:48, 90, 1
2023-06-23 00:52:13.8190, 2023-06-23, 00:52:13, 91, 1
2023-06-23 00:52:38.9180, 2023-06-23, 00:52:38, 92, 1
2023-06-23 00:53:23.8260, 2023-06-23, 00:53:23, 93, 1
2023-06-23 00:53:52.3630, 2023-06-23, 00:53:52, 94, 1
2023-06-23 00:54:17.2330, 2023-06-23, 00:54:17, 95, 1
2023-06-23 00:54:39.2080, 2023-06-23, 00:54:39, 96, 1
2023-06-23 00:55:02.0390, 2023-06-23, 00:55:02, 97, 1
2023-06-23 00:55:23.9250, 2023-06-23, 00:55:23, 98, 1
2023-06-23 00:55:47.8410, 2023-06-23, 00:55:47, 99, 1
2023-06-23 00:56:12.0640, 2023-06-23, 00:56:12, 100, 1
2023-06-23 00:56:34.8670, 2023-06-23, 00:56:34, 101, 1
2023-06-23 00:57:02.9330, 2023-06-23, 00:57:02, 102, 1
2023-06-23 00:57:26.6570, 2023-06-23, 00:57:26, 103, 1
2023-06-23 00:57:53.4530, 2023-06-23, 00:57:53, 104, 1
2023-06-23 00:58:12.8910, 2023-06-23, 00:58:12, 105, 1
2023-06-23 00:58:39.5150, 2023-06-23, 00:58:39, 106, 1
2023-06-23 00:58:57.4630, 2023-06-23, 00:58:57, 107, 1
2023-06-23 00:59:17.4320, 2023-06-23, 00:59:17, 108, 1
2023-06-23 00:59:39.8900, 2023-06-23, 00:59:39, 109, 1
2023-06-23 01:00:03.5350, 2023-06-23, 01:00:03, 110, 1`;

// Split the CSV data into rows
const rows = csv.split('\n');

// Transform the CSV rows into an array of ISO date strings
const isoDates = rows.map(row => {
  const parts = row.split(',');
  const datePart = parts[0].trim();
  return new Date(datePart).toISOString();
});

// Define the output folder and file path
const outputFolder = './_output';
const jsonFilePath = `${outputFolder}/output.json`;

// Ensure the output folder exists
if (!fs.existsSync(outputFolder)) {
  fs.mkdirSync(outputFolder);
}

// Write the ISO date array to a JSON file
fs.writeFileSync(jsonFilePath, JSON.stringify(isoDates, null, 2));

console.log(`Data saved to ${jsonFilePath}`);